//
// Implementing a 5-to-32 Line Decoder.
//
module top(A, D);


input [5:1] A;
output [32:1] D;

assign D[1] = A[5] & A[4] & A[3] & A[2] & A[1];
assign D[2] = A[5] & A[4] & A[3] & A[2] & ~A[1];
assign D[3] = A[5] & A[4] & A[3] & ~A[2] & A[1];
assign D[4] = A[5] & A[4] & A[3] & ~A[2] & ~A[1];
assign D[5] = A[5] & A[4] & ~A[3] & A[2] & A[1];
assign D[6] = A[5] & A[4] & ~A[3] & A[2] & ~A[1];
assign D[7] = A[5] & A[4] & ~A[3] & ~A[2] & A[1];
assign D[8] = A[5] & A[4] & ~A[3] & ~A[2] & ~A[1];
assign D[9] = A[5] & ~A[4] & A[3] & A[2] & A[1];
assign D[10] = A[5] & ~A[4] & A[3] & A[2] & ~A[1];
assign D[11] = A[5] & ~A[4] & A[3] & ~A[2] & A[1];
assign D[12] = A[5] & ~A[4] & A[3] & ~A[2] & ~A[1];
assign D[13] = A[5] & ~A[4] & ~A[3] & A[2] & A[1];
assign D[14] = A[5] & ~A[4] & ~A[3] & A[2] & ~A[1];
assign D[15] = A[5] & ~A[4] & ~A[3] & ~A[2] & A[1];
assign D[16] = A[5] & ~A[4] & ~A[3] & ~A[2] & ~A[1];
assign D[17] = ~A[5] & A[4] & A[3] & A[2] & A[1];
assign D[18] = ~A[5] & A[4] & A[3] & A[2] & ~A[1];
assign D[19] = ~A[5] & A[4] & A[3] & ~A[2] & A[1];
assign D[20] = ~A[5] & A[4] & A[3] & ~A[2] & ~A[1];
assign D[21] = ~A[5] & A[4] & ~A[3] & A[2] & A[1];
assign D[22] = ~A[5] & A[4] & ~A[3] & A[2] & ~A[1];
assign D[23] = ~A[5] & A[4] & ~A[3] & ~A[2] & A[1];
assign D[24] = ~A[5] & A[4] & ~A[3] & ~A[2] & ~A[1];
assign D[25] = ~A[5] & ~A[4] & A[3] & A[2] & A[1];
assign D[26] = ~A[5] & ~A[4] & A[3] & A[2] & ~A[1];
assign D[27] = ~A[5] & ~A[4] & A[3] & ~A[2] & A[1];
assign D[28] = ~A[5] & ~A[4] & A[3] & ~A[2] & ~A[1];
assign D[29] = ~A[5] & ~A[4] & ~A[3] & A[2] & A[1];
assign D[30] = ~A[5] & ~A[4] & ~A[3] & A[2] & ~A[1];
assign D[31] = ~A[5] & ~A[4] & ~A[3] & ~A[2] & A[1];
assign D[32] = ~A[5] & ~A[4] & ~A[3] & ~A[2] & ~A[1];

endmodule
